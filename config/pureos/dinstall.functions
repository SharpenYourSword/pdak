# -*- mode:sh -*-
# Timestamp. Used for dinstall stat graphs
function ts() {
        echo "Archive maintenance timestamp ($1): $(date +%H:%M:%S)"
}

# Remove daily lock
function remove_daily_lock() {
    rm -f $LOCK_DAILY
}

# Remove all locks
function remove_all_locks() {
    rm -f $LOCK_DAILY $LOCK_ACCEPTED $LOCK_NEW
}

# If we error out this one is called, *FOLLOWED* by cleanup above
function onerror() {
    ERRDATE=$(date "+%Y.%m.%d-%H:%M:%S")

    subject="ATTENTION ATTENTION!"
    if [ "${error}" = "false" ]; then
        subject="${subject} (continued)"
    else
        subject="${subject} (interrupted)"
    fi
    subject="${subject} dinstall error at ${ERRDATE} in ${STAGEFILE} - (Be quiet, Brain, or I'll stab you with a Q-tip)"

    if [ -r "${STAGEFILE}.log" ]; then
        cat "${STAGEFILE}.log"
    else
        echo "file ${STAGEFILE}.log does not exist, sorry"
    fi | mail -s "${subject}" -a "X-Debian: DAK" -a "From: PureOS Archive Masters <archive@puri.sm>" mak@debian.org
}

########################################################################
# the actual dinstall functions follow                                 #
########################################################################

function cruft() {
    log "Checking for cruft in overrides"
    dak check-overrides
}

function dominate() {
    log "Removing obsolete source and binary associations"
    dak dominate
    dak manage-debug-suites staging-debug dasyatis-debug
    dak manage-build-queues -a
}

function fingerprints() {
    log "Updating fingerprints"

    # People
    dak import-keyring -U '%s' /srv/dak/keyrings/upload-keyring.gpg
    # Robots
    dak import-keyring -U '%s' /srv/dak/keyrings/workers-keyring.gpg

    # TODO: We could send the result to an email adress...
}

function mpfm() {
    local archiveroot

    log "Generating package / file mapping"
    for archive in "${public_archives[@]}"; do
        archiveroot="$(get_archiveroot "${archive}")"
        dak make-pkg-file-mapping "${archive}" | bzip2 -9 > "${archiveroot}/indices/package-file.map.bz2"
    done
}

function packages() {
    log "Generating Packages and Sources files"
    for archive in "${public_archives[@]}"; do
        dak generate-packages-sources2 -a "${archive}"
        dak contents generate -a "${archive}"
    done
}

function pdiff() {
    log "Generating pdiff files"
    dak generate-index-diffs
}

function mirror() {
    local archiveroot_main
    local archiveroot_debug

    archiveroot_main="$(get_archiveroot "repo")"
    archiveroot_debug="$(get_archiveroot "repo-debug")"
    cd $public_ftpdir
    # sync the dists dir without hardlinks
    # (this is done to prevent archive issues while the indices are rebuilt)
    rsync -aqH --delete --delete-after ${archiveroot_main}/dists ./pureos/
    rsync -aqH --delete --delete-after ${archiveroot_main}/zzz-dists ./pureos/

    rsync -aqH --delete --delete-after ${archiveroot_debug}/dists ./pureos-debug/
    rsync -aqH --delete --delete-after ${archiveroot_debug}/zzz-dists ./pureos-debug/
}

function release() {
    log "Generating Release files"
    for archive in "${public_archives[@]}"; do
        dak generate-releases -a "${archive}"
    done
}

function dakcleanup() {
    log "Cleanup old packages/files"
    dak clean-suites -m 10000
    dak clean-queues -i "$unchecked"
}

function mklslar() {
    local archiveroot
    local FILENAME=ls-lR

    for archive in "${public_archives[@]}"; do
        archiveroot="$(get_archiveroot "${archive}")"
        cd "${archiveroot}"

        log "Removing any core files ..."
        find -type f -name core -print -delete

        log "Checking symlinks ..."
        symlinks -rd .

        log "Creating recursive directory listing ... "
        rm -f ${FILENAME}.gz
        TZ=UTC ls -lR | gzip -9c --rsyncable > ${FILENAME}.gz
    done
}

function mkmaintainers() {
    local archiveroot
    local indices

    log 'Creating Maintainers index ... '

    for archive in "${public_archives[@]}"; do
        archiveroot="$(get_archiveroot "${archive}")"
	indices="${archiveroot}/indices"
	if ! [ -d "${indices}" ]; then
	    mkdir "${indices}"
	fi
        cd "${indices}"

        dak make-maintainers -a "${archive}"
        gzip -9v --rsyncable <Maintainers >Maintainers.gz
        gzip -9v --rsyncable <Uploaders >Uploaders.gz
    done
}

function mkchecksums() {
    dsynclist=$dbdir/dsync.list
    md5list=$indices/md5sums

    log -n "Creating md5 / dsync index file ... "

    cd "$ftpdir"
    ${bindir}/dsync-flist -q generate $dsynclist --exclude $dsynclist --md5
    ${bindir}/dsync-flist -q md5sums $dsynclist | gzip -9n > ${md5list}.gz
    ${bindir}/dsync-flist -q link-dups $dsynclist || true
}

function mirrorpush() {
    log "Checking the public archive copy"
    cd ${mirrordir}/dists

    broken=0
    for release in $(find . -name "InRelease"); do
        echo "Processing: ${release}"
        subdir=${release%/InRelease}
        while read SHASUM SIZE NAME; do
            if ! [ -f "${subdir}/${NAME}" ]; then
               bname=$(basename ${NAME})
                if [[ "${bname}" =~ ^(Packages|Sources|Translation-[a-zA-Z_]+)$ ]]; then
                    # We don't keep unpacked files, don't check for their existance.
                    # We might want to go and check their unpacked shasum, but right now
                    # I don't care. I believe it should be enough if all the packed shasums
                    # match.
                    continue
                fi
                broken=$(( broken + 1 ))
                echo "File ${subdir}/${NAME} is missing"
                continue
            fi

           # We do have symlinks in the tree (see the contents files currently).
           # So we use "readlink -f" to check the size of the target, as thats basically
           # what gen-releases does
            fsize=$(stat -c %s $(readlink -f "${subdir}/${NAME}"))
            if [ ${fsize} -ne ${SIZE} ]; then
                broken=$(( broken + 1 ))
                echo "File ${subdir}/${NAME} has size ${fsize}, expected is ${SIZE}"
                continue
            fi

           fshasum=$(sha1sum $(readlink -f "${subdir}/${NAME}"))
            fshasum=${fshasum%% *}
            if [ "${fshasum}" != "${SHASUM}" ]; then
                broken=$(( broken + 1 ))
                echo "File ${subdir}/${NAME} has checksum ${fshasum}, expected is ${SHASUM}"
                continue
            fi
        done < <(sed '1,/SHA1:/d' "${release}" | sed '/SHA256:/,$d')
    done

    if [ $broken -gt 0 ]; then
        log_error "Trouble with the public mirror, found ${broken} errors"
        return 21
    fi
}

function stats() {
    log "Updating stats data"
    cd $configdir
    dak stats arch-space > $webdir/arch-space
    dak stats pkg-nums > $webdir/pkg-nums
}

function cleantransactions() {
    log "Cleanup transaction ids older than 3 months"
    cd $base/backup/
    find -maxdepth 1 -mindepth 1 -type f -name 'txid_*' -mtime +90 -delete
}

# save timestamp when we start
function savetimestamp() {
	NOW=`date "+%Y.%m.%d-%H:%M:%S"`
	echo ${NOW} > "${dbdir}/dinstallstart"
}

function renamelogfile() {
    if [ -f "${dbdir}/dinstallstart" ]; then
        NOW=$(cat "${dbdir}/dinstallstart")
        mv "$LOGFILE" "$logdir/dinstall_${NOW}.log"
        bzip2 -9 "$logdir/dinstall_${NOW}.log"
    else
        log_error "Problem, I don't know when dinstall started, unable to do log statistics."
        NOW=`date "+%Y.%m.%d-%H:%M:%S"`
        mv "$LOGFILE" "$logdir/dinstall_${NOW}.log"
        bzip2 -9 "$logdir/dinstall_${NOW}.log"
    fi
}

# do a last run of process-unchecked before dinstall is on.
function process_unchecked() {
    log "Processing the unchecked queue"
    UNCHECKED_WITHOUT_LOCK="-p"
    do_unchecked
}

# Function to update a "statefile" telling people what we are doing
# (more or less).
#
# This should be called with the argument(s)
#  - Status name we want to show.
#
function state() {
    RIGHTNOW="$(date -u +"%a %b %d %T %Z %Y (%s)")"
    cat >"${DINSTALLSTATE}" <<EOF
Dinstall start: ${DINSTALLBEGIN}
Current action: ${1}
Action start: ${RIGHTNOW}
EOF
}

# extract changelogs and stuff
function changelogs() {
    log "Extracting changelogs"
    dak make-changelog -e -a repo
}

# Syncing AppStream/DEP-11 data
function dep11() {
    log "Synchronizing AppStream metadata"
    # First sync their newest data
    local dep11dir="${scriptdir}/dep11"
    mkdir -p ${dep11dir}
    cd ${dep11dir}
    rsync -rtq --safe-links --chmod=F644,D755 --delete --delete-after -e "ssh -p 3376" appstream.pureos.net:/srv/public/data/ . || true

    # Lets check!
    if ${scriptsdir}/dep11-basic-validate.py . ${dep11dir}/; then
        # Yay, worked, lets copy around
        for dir in ${extimportdists}; do
            if [[ -d ${dir}/  ]]; then
                for comp in main; do
                    mkdir -p ${ftpdir}/pureos/dists/${dir}/${comp}/dep11
                    cd ${dir}/${comp}
                    rsync -rtq --delete --delete-after --exclude by-hash --exclude "./*.tmp" . ${ftpdir}/pureos/dists/${dir}/${comp}/dep11/.
                    cd ${dep11dir}
                done
            fi
        done
    else
        echo "ARRRR, bad guys, wrong files, ARRR"
        echo "Arf, Arf, Arf, bad guys, wrong files, arf, arf, arf" | mail -a "X-Debian: DAK" -s "Don't you kids take anything. I'm watching you. I've got eye implants in the back of my head." -a "From: PureOS Masters <master@repo.pureos.net>" mak@debian.org
    fi
}

function laniakea_synchrotron() {
    log "Synchronizing packages and data"
    synchrotron autosync
}

function laniakea_spears() {
    log "Migrating packages into the release suite"
    /usr/local/lib/laniakea/spears migrate
}

function laniakea_planter() {
    log "Creating default metapackage reports"
    /usr/local/lib/laniakea/planter run
}

function laniakea_debcheck() {
    log "Updating Debcheck reports..."
    /usr/local/lib/laniakea/debcheck sources
    /usr/local/lib/laniakea/debcheck binaries
}

function laniakea_dataimport() {
    log "Updating Laniakea package database..."
    /usr/local/lib/laniakea/lk-dataimport repo landing
    /usr/local/lib/laniakea/lk-dataimport repo green
}

function sync_master_web() {
    rsync -artq  --chmod=F644,D755 --delete --delete-after --safe-links -e "ssh -p 3376" /srv/dak/export/ master.pureos.net:/srv/master.pureos.net/export | true
    rsync -artqL --chmod=F644,D755 --delete --delete-after --safe-links -e "ssh -p 3376" /srv/master.pureos.net/ master.pureos.net:/srv/master.pureos.net/raw | true
}
